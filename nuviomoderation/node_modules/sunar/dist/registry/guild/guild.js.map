{"version":3,"sources":["../../../src/registry/guild/guild.ts"],"names":[],"mappings":";;;AAcA,eAAsB,qBAAA,CACrB,aACA,QACoD,EAAA;AACpD,EAAA,MAAM,sBAAsB,sBAAuB,EAAA,CAAA;AAEnD,EAAA,IAAI,mBAAoB,CAAA,MAAA,IAAU,CAAG,EAAA,OAAO,EAAC,CAAA;AAE7C,EAAA,MAAM,UAAoD,EAAC,CAAA;AAE3D,EAAA,KAAA,MAAW,WAAW,QAAU,EAAA;AAC/B,IAAA,MAAM,SAAS,MAAM,WAAA,CAAY,QAAS,CAAA,GAAA,CAAI,qBAAqB,OAAO,CAAA,CAAA;AAC1E,IAAA,OAAA,CAAQ,KAAK,MAAM,CAAA,CAAA;AAAA,GACpB;AAEA,EAAO,OAAA,OAAA,CAAA;AACR,CAAA;AAhBsB,MAAA,CAAA,qBAAA,EAAA,uBAAA,CAAA","file":"guild.js","sourcesContent":["import type { ApplicationCommand, ClientApplication, Collection } from 'discord.js';\n\nimport { getApplicationCommands } from '../../utils';\n\n/**\n * Register all commands for specific guilds.\n *\n * @param application The client application where the commands will be registered.\n * @param guildIds The IDs of the guilds where the commands will be registered.\n *\n * @returns An array of registered application commands collection\n *\n * @see https://sunar.js.org/docs/guides/registering-commands/guilds\n */\nexport async function registerGuildCommands(\n\tapplication: ClientApplication,\n\tguildIds: string[],\n): Promise<Collection<string, ApplicationCommand>[]> {\n\tconst applicationCommands = getApplicationCommands();\n\n\tif (applicationCommands.length <= 0) return [];\n\n\tconst results: Collection<string, ApplicationCommand>[] = [];\n\n\tfor (const guildId of guildIds) {\n\t\tconst result = await application.commands.set(applicationCommands, guildId);\n\t\tresults.push(result);\n\t}\n\n\treturn results;\n}\n"]}