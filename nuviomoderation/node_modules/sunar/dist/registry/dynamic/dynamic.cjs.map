{"version":3,"sources":["../../../src/registry/dynamic/dynamic.ts"],"names":["getSunarApplicationCommands","Collection"],"mappings":";;;;;;;AAkBA,eAAsB,iBAAiB,WAAgE,EAAA;AACtG,EAAA,MAAM,WAAWA,qCAA4B,EAAA,CAAA;AAE7C,EAAM,MAAA,cAAA,mBAAkB,MAAA,CAAA,CAAA,OAAA,KACvB,OAAQ,CAAA,MAAA,CAAO,YAAY,OAAQ,CAAA,MAAA,CAAO,QAAS,CAAA,MAAA,GAAS,CADtC,EAAA,gBAAA,CAAA,CAAA;AAGvB,EAAM,MAAA,cAAA,GAAiB,SAAS,MAAO,CAAA,CAAC,MAAM,CAAC,cAAA,CAAe,CAAC,CAAC,CAAA,CAAA;AAChE,EAAM,MAAA,aAAA,GAAgB,QAAS,CAAA,MAAA,CAAO,cAAc,CAAA,CAAA;AAEpD,EAAI,IAAA,oBAAA,GAAgE,IAAIC,qBAAW,EAAA,CAAA;AAEnF,EAAI,IAAA,cAAA,CAAe,SAAS,CAAG,EAAA;AAC9B,IAAM,MAAA,MAAA,GAAS,MAAM,WAAA,CAAY,QAAS,CAAA,GAAA,CAAI,cAAe,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,CAAE,CAAA,IAAI,CAAC,CAAA,CAAA;AAC/E,IAAuB,oBAAA,GAAA,MAAA,CAAA;AAAA,GACxB;AAEA,EAAA,MAAM,uBAA+D,EAAC,CAAA;AAEtE,EAAI,IAAA,aAAA,CAAc,SAAS,CAAG,EAAA;AAC7B,IAAA,MAAM,eAAyD,EAAC,CAAA;AAEhE,IAAA,KAAA,MAAW,EAAE,MAAA,EAAQ,IAAK,EAAA,IAAK,aAAe,EAAA;AAC7C,MAAA,IAAI,CAAC,MAAO,CAAA,QAAA,IAAY,MAAO,CAAA,QAAA,CAAS,UAAU,CAAG,EAAA,SAAA;AAErD,MAAW,KAAA,MAAA,OAAA,IAAW,OAAO,QAAU,EAAA;AACtC,QAAA,IAAI,aAAa,OAAO,CAAA,eAAgB,OAAO,CAAA,CAAE,KAAK,IAAI,CAAA,CAAA;AAAA,aACxC,YAAA,CAAA,OAAO,CAAI,GAAA,CAAC,IAAI,CAAA,CAAA;AAAA,OACnC;AAAA,KACD;AAEA,IAAA,KAAA,MAAW,OAAW,IAAA,MAAA,CAAO,OAAQ,CAAA,YAAY,CAAG,EAAA;AACnD,MAAM,MAAA,CAAC,OAAS,EAAA,OAAO,CAAI,GAAA,OAAA,CAAA;AAE3B,MAAA,MAAM,SAAS,MAAM,WAAA,CAAY,QAAS,CAAA,GAAA,CAAI,SAAS,OAAO,CAAA,CAAA;AAC9D,MAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA,CAAA;AAAA,KACjC;AAAA,GACD;AAEA,EAAO,OAAA;AAAA,IACN,cAAgB,EAAA,oBAAA;AAAA,IAChB,aAAe,EAAA,oBAAA;AAAA,GAChB,CAAA;AACD,CAAA;AA1CsB,MAAA,CAAA,gBAAA,EAAA,kBAAA,CAAA","file":"dynamic.cjs","sourcesContent":["import { type ApplicationCommand, type ApplicationCommandData, type ClientApplication, Collection } from 'discord.js';\n\nimport { type SunarApplicationCommand, getSunarApplicationCommands } from '../../utils';\n\nexport interface DynamicRegistryResult {\n\tglobalCommands: Collection<string, ApplicationCommand>;\n\tguildCommands: Collection<string, ApplicationCommand>[];\n}\n\n/**\n * Register global and guild commands, by default all will be global, to specify that is a guild command add their IDs in the command configuration with the config mutator.\n *\n * @param application The client application where the commands will be registered.\n *\n * @returns An object with the registered global and guild commands\n *\n * @see https://sunar.js.org/docs/guides/registering-commands/dynamic\n */\nexport async function registerCommands(application: ClientApplication): Promise<DynamicRegistryResult> {\n\tconst commands = getSunarApplicationCommands();\n\n\tconst isGuildCommand = (command: SunarApplicationCommand) =>\n\t\tcommand.config.guildIds && command.config.guildIds.length > 0;\n\n\tconst globalCommands = commands.filter((c) => !isGuildCommand(c));\n\tconst guildCommands = commands.filter(isGuildCommand);\n\n\tlet globalCommandsResult: DynamicRegistryResult['globalCommands'] = new Collection();\n\n\tif (globalCommands.length > 0) {\n\t\tconst result = await application.commands.set(globalCommands.map((c) => c.data));\n\t\tglobalCommandsResult = result;\n\t}\n\n\tconst guildCommandsResults: DynamicRegistryResult['guildCommands'] = [];\n\n\tif (guildCommands.length > 0) {\n\t\tconst mappedGuilds: Record<string, ApplicationCommandData[]> = {};\n\n\t\tfor (const { config, data } of guildCommands) {\n\t\t\tif (!config.guildIds || config.guildIds.length <= 0) continue;\n\n\t\t\tfor (const guildId of config.guildIds) {\n\t\t\t\tif (mappedGuilds[guildId]) mappedGuilds[guildId].push(data);\n\t\t\t\telse mappedGuilds[guildId] = [data];\n\t\t\t}\n\t\t}\n\n\t\tfor (const entries of Object.entries(mappedGuilds)) {\n\t\t\tconst [guildId, command] = entries;\n\n\t\t\tconst result = await application.commands.set(command, guildId);\n\t\t\tguildCommandsResults.push(result);\n\t\t}\n\t}\n\n\treturn {\n\t\tglobalCommands: globalCommandsResult,\n\t\tguildCommands: guildCommandsResults,\n\t};\n}\n"]}