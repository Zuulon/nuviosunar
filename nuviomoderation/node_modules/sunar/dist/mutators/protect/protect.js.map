{"version":3,"sources":["../../../src/mutators/protect/protect.ts"],"names":[],"mappings":";;;AAkBO,SAAS,OAAA,CAA6C,SAAmB,UAAsC,EAAA;AACrH,EAAA,IAAI,CAAC,KAAM,CAAA,OAAA,CAAQ,QAAQ,UAAU,CAAA,SAAU,OAAQ,CAAA,UAAA,CAAA;AACvD,EAAQ,OAAA,CAAA,UAAA,CAAW,IAAK,CAAA,GAAI,UAAkB,CAAA,CAAA;AAC9C,EAAA,OAAO,OAAQ,CAAA,UAAA,CAAA;AAChB,CAAA;AAJgB,MAAA,CAAA,OAAA,EAAA,SAAA,CAAA","file":"protect.js","sourcesContent":["import type { Protector } from '../../builders';\nimport type { Builder } from '../../types';\n\nexport type ProtectableBuilder = Pick<Builder, 'type' | 'protectors'>;\n\n// FIXME: Improve types, \"any\" should not be used here\n\n/**\n * Add a middleware to a builder.\n *\n * @param builder The builder to mutate\n * @param protectors An array of protectors that will be added to the builder\n * @returns The new protectors array\n *\n * @see https://sunar.js.org/docs/mutators/protect\n * @see https://sunar.js.org/docs/guides/middlewares#create-the-protector-logic\n * @see https://sunar.js.org/docs/guides/middlewares#create-a-protected-command\n */\nexport function protect<TBuilder extends ProtectableBuilder>(builder: TBuilder, protectors: Protector[]): Protector[] {\n\tif (!Array.isArray(builder.protectors)) return builder.protectors;\n\tbuilder.protectors.push(...(protectors as any));\n\treturn builder.protectors;\n}\n"]}