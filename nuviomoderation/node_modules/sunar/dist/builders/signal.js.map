{"version":3,"sources":["../../src/builders/signal.ts"],"names":[],"mappings":";;;;AAoBO,IAAM,SAAN,MAAgH;AAAA,EApBvH;AAoBuH,IAAA,MAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EACtG,OAAO,QAAS,CAAA,MAAA,CAAA;AAAA,EAChB,IAAA,CAAA;AAAA,EACA,OAAA,CAAA;AAAA,EAET,aAAgD,EAAC,CAAA;AAAA,EACjD,OAAA,gCAAsE,gBAAN,EAAA,SAAA,CAAA,CAAA;AAAA,EAEvE,WAAY,CAAA,IAAA,EAAa,OAAyB,GAAA,EAAI,EAAA;AACrD,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AAAA,GAChB;AACD","file":"signal.js","sourcesContent":["import type { Awaitable, ClientEvents } from 'discord.js';\n\nimport type { Protector } from '.';\nimport { UNHANDLED_SYMBOL } from '../symbols';\nimport type { Builder } from '../types';\nimport { Builders } from '../utils';\n\ntype SignalName = keyof ClientEvents;\n\nexport interface SignalOptions {\n\t/** If the signal only has to be emitted once. */\n\tonce?: boolean;\n}\n\n/**\n * Signals in Sunar correspond to events in discord.js. They allow you to handle various actions and responses that occur within your Discord bot, such as messages being sent, users joining or leaving, and more.\n *\n * @see https://sunar.js.org/docs/builders/signal\n * @see https://sunar.js.org/docs/guides/working-with-signals\n */\nexport class Signal<TName extends SignalName = SignalName> implements Pick<Builder, 'type' | 'protectors' | 'execute'> {\n\tpublic readonly type = Builders.Signal;\n\tpublic readonly name: TName;\n\tpublic readonly options: SignalOptions;\n\n\tpublic protectors: Protector<{ signals: TName[] }>[] = [];\n\tpublic execute: (...args: ClientEvents[TName]) => Awaitable<unknown> = () => UNHANDLED_SYMBOL;\n\n\tconstructor(name: TName, options: SignalOptions = {}) {\n\t\tthis.name = name;\n\t\tthis.options = options;\n\t}\n}\n"]}