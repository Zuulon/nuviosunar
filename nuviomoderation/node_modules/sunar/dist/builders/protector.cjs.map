{"version":3,"sources":["../../src/builders/protector.ts"],"names":["Builders","UNHANDLED_SYMBOL"],"mappings":";;;;;;;AA8BO,IAAM,YAAN,MAEP;AAAA,EAhCA;AAgCA,IAAA,MAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EACiB,OAAOA,kBAAS,CAAA,SAAA,CAAA;AAAA,EAChB,OAAA,CAAA;AAAA,EAET,OAAA,gCAMyBC,4BAAN,EAAA,SAAA,CAAA,CAAA;AAAA,EAEnB,YAAY,OAAoB,EAAA;AACtC,IAAK,IAAA,CAAA,OAAA,GAAU,WAAY,EAAC,CAAA;AAAA,GAC7B;AACD","file":"protector.cjs","sourcesContent":["import type {\n\tAnySelectMenuInteraction,\n\tAutocompleteInteraction,\n\tAwaitable,\n\tButtonInteraction,\n\tChatInputCommandInteraction,\n\tClientEvents,\n\tContextMenuCommandInteraction,\n\tModalSubmitInteraction,\n} from 'discord.js';\n\nimport { UNHANDLED_SYMBOL } from '../symbols';\nimport type { Builder, CommandKey, ComponentKey, NextFunction } from '../types';\nimport { Builders, Commands, Components } from '../utils';\n\nexport interface ProtectorOptions {\n\t/** The signals that can be protected by this protector. */\n\tsignals?: (keyof ClientEvents)[];\n\t/** The commands types that can be protected by this protector. */\n\tcommands?: CommandKey[];\n\t/** The components types that can be protected by this protector. */\n\tcomponents?: ComponentKey[];\n}\n\n/**\n * Protectors in Sunar act as middleware, allowing you to intercept and control the flow of commands and interactions within your Discord bot. They provide a flexible way to enforce permissions, validate inputs, or perform pre-processing before executing commands.\n *\n * @see https://sunar.js.org/docs/builders/protector\n * @see https://sunar.js.org/docs/guides/middlewares#protectors\n */\nexport class Protector<TOptions extends ProtectorOptions = ProtectorOptions>\n\timplements Pick<Builder, 'type' | 'execute'>\n{\n\tpublic readonly type = Builders.Protector;\n\tpublic readonly options: TOptions;\n\n\tpublic execute: (\n\t\tdata:\n\t\t\t| (TOptions['commands'] extends string[] ? ExecuteData[TOptions['commands'][number]] : never)\n\t\t\t| (TOptions['components'] extends string[] ? ExecuteData[TOptions['components'][number]] : never)\n\t\t\t| (TOptions['signals'] extends string[] ? ClientEvents[TOptions['signals'][number]] : never),\n\t\tnext: NextFunction,\n\t) => Awaitable<unknown> = () => UNHANDLED_SYMBOL;\n\n\tpublic constructor(options?: TOptions) {\n\t\tthis.options = options ?? ({} as TOptions);\n\t}\n}\n\nexport interface ExecuteData {\n\t[Commands.Slash]: ChatInputCommandInteraction;\n\t[Commands.ContextMenu]: ContextMenuCommandInteraction;\n\t[Commands.Autocomplete]: AutocompleteInteraction;\n\t[Components.Button]: ButtonInteraction;\n\t[Components.Modal]: ModalSubmitInteraction;\n\t[Components.SelectMenu]: AnySelectMenuInteraction;\n}\n\nexport type ProtectorExecuteData<TOptions extends ProtectorOptions = ProtectorOptions> =\n\t| (TOptions['commands'] extends string[] ? ExecuteData[TOptions['commands'][number]] : never)\n\t| (TOptions['components'] extends string[] ? ExecuteData[TOptions['components'][number]] : never)\n\t| (TOptions['signals'] extends string[] ? ClientEvents[TOptions['signals'][number]] : never);\n"]}