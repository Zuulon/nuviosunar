import { SelectMenuType, Awaitable, ComponentType, ChannelSelectMenuInteraction, MentionableSelectMenuInteraction, RoleSelectMenuInteraction, StringSelectMenuInteraction, UserSelectMenuInteraction, AnySelectMenuInteraction } from 'discord.js';
import { B as Builder, a as Protector } from '../builder-C6J45hMw.cjs';
import { a as CooldownResolvable } from '../client-CcTd37MH.cjs';
import { Builders } from '../utils/enums.cjs';
import '../utils/constants.cjs';
import '../types/utils.cjs';

interface SelectMenuOptions {
    /** The select menu custom ID to target. */
    id: string | RegExp;
    /** The type of select menu to target. */
    type: SelectMenuType;
}
interface SelectMenuConfig {
    cooldown?: CooldownResolvable;
}
/**
 * Select menus allow users to choose from a list of options. They are useful for forms, surveys, or any scenario where the user needs to make a selection from multiple choices.
 *
 * @see https://sunar.js.org/docs/builders/select-menu
 */
declare class SelectMenu<TOptions extends SelectMenuOptions = SelectMenuOptions> implements Builder {
    readonly type = Builders.SelectMenu;
    readonly options: TOptions;
    config: SelectMenuConfig;
    protectors: Protector<{
        components: 'selectMenu'[];
    }>[];
    execute: (...args: SelectMenuArgs<TOptions>) => Awaitable<unknown>;
    constructor(options: TOptions);
}
type SelectMenuArgs<TOptions extends SelectMenuOptions> = [
    interaction: TOptions['type'] extends ComponentType.ChannelSelect ? ChannelSelectMenuInteraction : TOptions['type'] extends ComponentType.MentionableSelect ? MentionableSelectMenuInteraction : TOptions['type'] extends ComponentType.RoleSelect ? RoleSelectMenuInteraction : TOptions['type'] extends ComponentType.StringSelect ? StringSelectMenuInteraction : TOptions['type'] extends ComponentType.UserSelect ? UserSelectMenuInteraction : AnySelectMenuInteraction
];

export { SelectMenu, type SelectMenuArgs, type SelectMenuConfig, type SelectMenuOptions };
