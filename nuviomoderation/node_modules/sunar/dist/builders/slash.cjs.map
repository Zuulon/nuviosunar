{"version":3,"sources":["../../src/builders/slash.ts"],"names":["Builders","UNHANDLED_SYMBOL"],"mappings":";;;;;;;AAcO,IAAM,QAAN,MAA+B;AAAA,EAdtC;AAcsC,IAAA,MAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EACrB,OAAOA,kBAAS,CAAA,KAAA,CAAA;AAAA,EAChB,IAAA,CAAA;AAAA,EAET,SAAsB,EAAC,CAAA;AAAA,EACvB,aAAmD,EAAC,CAAA;AAAA,EACpD,OAAA,gCAAkFC,4BAAN,EAAA,SAAA,CAAA,CAAA;AAAA,EAEnF,YAAY,IAAuC,EAAA;AAClD,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAAA,GACb;AACD","file":"slash.cjs","sourcesContent":["import type { Awaitable, ChatInputApplicationCommandData, ChatInputCommandInteraction } from 'discord.js';\n\nimport type { Protector } from '.';\nimport { UNHANDLED_SYMBOL } from '../symbols';\nimport type { Builder, CommandConfig } from '../types';\nimport { Builders } from '../utils';\n\nexport interface SlashConfig extends CommandConfig {}\n\n/**\n * Slash commands are one of the primary ways users interact with bots. They provide a structured way for users to issue commands directly within the chat interface.\n *\n * @see https://sunar.js.org/docs/builders/slash\n */\nexport class Slash implements Builder {\n\tpublic readonly type = Builders.Slash;\n\tpublic readonly data: ChatInputApplicationCommandData;\n\n\tpublic config: SlashConfig = {};\n\tpublic protectors: Protector<{ commands: 'slash'[] }>[] = [];\n\tpublic execute: (interaction: ChatInputCommandInteraction) => Awaitable<unknown> = () => UNHANDLED_SYMBOL;\n\n\tconstructor(data: ChatInputApplicationCommandData) {\n\t\tthis.data = data;\n\t}\n}\n"]}