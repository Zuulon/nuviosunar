import { RepliableInteraction, Client as Client$1, ClientOptions } from 'discord.js';
import { Signals } from './utils/constants.cjs';
import { CooldownScope } from './utils/enums.cjs';

/** Represents a timestamp for a cooldown. */
interface CooldownTimestamp {
    /** The ID of the target (user, channel, guild, or global) for the cooldown. */
    targetId: string | symbol;
    /** The expiration time of the cooldown in milliseconds. */
    expiration: number;
    /** The timer associated with the cooldown. */
    timer: NodeJS.Timeout;
}
/**
 * A type that resolves to a cooldown configuration.
 * Can be either a number (milliseconds) or a more detailed configuration object.
 */
type CooldownResolvable = number | CooldownConfig;
/** Configuration for cooldowns. */
type CooldownConfig<TScope extends CooldownScope = CooldownScope> = TScope extends CooldownScope.Global ? {
    /** The cooldown time in milliseconds. */
    time: number;
    /** Optional limit for the number of uses before the cooldown applies. */
    limit?: number;
    /** The scope of the cooldown, set to global. */
    scope: CooldownScope.Global;
} : {
    /** The cooldown time in milliseconds. */
    time: number;
    /** Optional array of IDs to exclude from the cooldown. */
    exclude?: string[];
    /** Optional limit for the number of uses before the cooldown applies. */
    limit?: number;
    /** The scope of the cooldown, defaults to the provided scope. */
    scope?: TScope;
};
/** Context for the cooldown. */
interface CooldownContext {
    /** The remaining time of the cooldown in milliseconds. */
    remaining: number;
    /** The scope of the cooldown. */
    scope: CooldownScope;
    /** The limit for the number of uses before the cooldown applies. */
    limit: number;
}

interface SunarSignals {
    [Signals.Cooldown]: [interaction: RepliableInteraction, context: CooldownContext];
}

declare class Client<Ready extends boolean = boolean> extends Client$1<Ready> {
    constructor(options: ClientOptions);
    login(token?: string): Promise<string>;
}
declare module 'discord.js' {
    interface ClientEvents extends SunarSignals {
    }
}

export { type CooldownTimestamp as C, type SunarSignals as S, type CooldownResolvable as a, type CooldownConfig as b, type CooldownContext as c, Client as d };
