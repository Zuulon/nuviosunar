'use strict';

var discord_js = require('discord.js');
var index_cjs$1 = require('../../stores/index.cjs');
var index_cjs = require('../../utils/index.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function handleCooldown(interaction, builder) {
  if (!builder.config.cooldown) return false;
  if (!interaction.isRepliable()) return false;
  const config = index_cjs.resolveCooldown(builder.config.cooldown);
  const { scope } = config;
  const isUser = scope === index_cjs.CooldownScope.User;
  const isChannel = scope === index_cjs.CooldownScope.Channel;
  const isGuild = scope === index_cjs.CooldownScope.Guild;
  const isGlobal = scope === index_cjs.CooldownScope.Global;
  const targetId = isUser ? interaction.user.id : isChannel ? interaction.channelId : isGuild ? interaction.guildId : isGlobal ? Symbol() : null;
  if (targetId === null) return false;
  if (!isGlobal && config.exclude.includes(targetId)) return false;
  const scopes = index_cjs$1.cooldownManager.ensure(builder.type, () => new discord_js.Collection());
  const interactionId = getInteractionId(interaction);
  if (!interactionId) return false;
  const cooldowns = scopes.ensure(scope, () => new discord_js.Collection([[interactionId, []]]));
  const timestamps = cooldowns.ensure(interactionId, () => []);
  const targetTimestamps = timestamps.filter(
    (c) => typeof c.targetId === "symbol" ? c.targetId === targetId : c.targetId.startsWith(String(targetId))
  );
  if (!targetTimestamps || targetTimestamps.length < config.limit) {
    addCooldown(targetId, config.time, interactionId, cooldowns, timestamps, targetTimestamps);
    return false;
  }
  const lastTimestamp = targetTimestamps.at(-1);
  if (!lastTimestamp) return false;
  const remaining = config.time - (Date.now() - lastTimestamp.expiration);
  index_cjs$1.context.client.emit("cooldown", interaction, { remaining, scope, limit: config.limit });
  return true;
}
__name(handleCooldown, "handleCooldown");
function addCooldown(targetId, time, interactionId, cooldownManager2, currentTimestamps, targetTimestamps) {
  const timer = setTimeout(() => {
    cooldownManager2.sweep((t) => t.some((c) => c.targetId === uniqueId));
  }, time);
  const uniqueId = `${String(targetId)}-${Date.now().toString(36)}`;
  const newTimestamp = { targetId: uniqueId, expiration: Date.now(), timer };
  cooldownManager2.set(interactionId, currentTimestamps ? [...currentTimestamps, newTimestamp] : [newTimestamp]);
  for (const { timer: timer2 } of targetTimestamps) {
    timer2.refresh();
  }
}
__name(addCooldown, "addCooldown");
function getInteractionId(interaction) {
  if (interaction.isCommand()) return interaction.commandId;
  if (interaction.isMessageComponent()) return interaction.customId;
  return null;
}
__name(getInteractionId, "getInteractionId");

exports.handleCooldown = handleCooldown;
//# sourceMappingURL=cooldown.cjs.map
//# sourceMappingURL=cooldown.cjs.map