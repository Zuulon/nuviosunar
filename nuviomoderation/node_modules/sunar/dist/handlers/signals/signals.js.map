{"version":3,"sources":["../../../src/handlers/signals/signals.ts"],"names":[],"mappings":";;;;AAIO,SAAS,aAAgB,GAAA;AAC/B,EAAW,KAAA,MAAA,MAAA,IAAU,OAAQ,CAAA,MAAA,EAAU,EAAA;AACtC,IAAI,IAAA,CAAC,OAAO,OAAS,EAAA,OAAA;AAErB,IAAA,MAAM,MAAS,GAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,GAAO,MAAS,GAAA,IAAA,CAAA;AAE9C,IAAA,OAAA,CAAQ,OAAO,MAAM,CAAA,CAAE,MAAO,CAAA,IAAA,EAAM,UAAU,IAAS,KAAA;AACtD,MAAI,IAAA,CAAC,OAAO,OAAS,EAAA,OAAA;AAErB,MAAM,MAAA,WAAA,GAAc,MAAM,gBAAiB,CAAA,EAAE,YAAY,MAAO,CAAA,UAAA,EAAY,IAAM,EAAA,IAAA,EAAM,CAAA,CAAA;AACxF,MAAA,IAAI,CAAC,WAAa,EAAA,OAAA;AAElB,MAAO,MAAA,CAAA,OAAA,CAAQ,GAAG,IAAI,CAAA,CAAA;AAAA,KACtB,CAAA,CAAA;AAAA,GACF;AACD,CAAA;AAfgB,MAAA,CAAA,aAAA,EAAA,eAAA,CAAA","file":"signals.js","sourcesContent":["import { context, signals } from '../../stores';\nimport { handleProtectors } from '../protectors';\n\n/** Handle all the signals. This is used by Sunar internally. */\nexport function handleSignals() {\n\tfor (const signal of signals.values()) {\n\t\tif (!signal.execute) return;\n\n\t\tconst method = signal.options.once ? 'once' : 'on';\n\n\t\tcontext.client[method](signal.name, async (...args) => {\n\t\t\tif (!signal.execute) return;\n\n\t\t\tconst canContinue = await handleProtectors({ protectors: signal.protectors, data: args });\n\t\t\tif (!canContinue) return;\n\n\t\t\tsignal.execute(...args);\n\t\t});\n\t}\n}\n"]}