{"version":3,"sources":["../../../src/handlers/protectors/protectors.ts"],"names":[],"mappings":";;;AAQA,eAAsB,gBAAkD,CAAA;AAAA,EACvE,UAAA;AAAA,EACA,IAAA;AACD,CAA2D,EAAA;AAC1D,EAAA,IAAI,CAAC,UAAA,IAAc,UAAW,CAAA,MAAA,IAAU,GAAU,OAAA,IAAA,CAAA;AAElD,EAAA,KAAA,MAAW,aAAa,UAAY,EAAA;AACnC,IAAI,IAAA,OAAO,SAAU,CAAA,OAAA,KAAY,UAAY,EAAA,SAAA;AAG7C,IAAA,MAAM,SAAS,MAAM,SAAA,CAAU,OAAQ,CAAA,IAAA,EAAe,MAAM,qBAAqB,CAAA,CAAA;AAEjF,IAAA,IAAI,WAAW,gBAAkB,EAAA,SAAA;AACjC,IAAI,IAAA,MAAA,KAAW,uBAA8B,OAAA,KAAA,CAAA;AAAA,GAC9C;AAEA,EAAO,OAAA,IAAA,CAAA;AACR,CAAA;AAjBsB,MAAA,CAAA,gBAAA,EAAA,kBAAA,CAAA","file":"protectors.js","sourcesContent":["import type { Protector, ProtectorExecuteData } from '../../builders';\nimport { PROTECTOR_NEXT_SYMBOL, UNHANDLED_SYMBOL } from '../../symbols';\n\nexport interface HandleProtectorsOptions<TProtectors extends Protector[]> {\n\tprotectors?: TProtectors;\n\tdata: ProtectorExecuteData<TProtectors[number]['options']>;\n}\n\nexport async function handleProtectors<TProtectors extends Protector[]>({\n\tprotectors,\n\tdata,\n}: HandleProtectorsOptions<TProtectors>): Promise<boolean> {\n\tif (!protectors || protectors.length <= 0) return true;\n\n\tfor (const protector of protectors) {\n\t\tif (typeof protector.execute !== 'function') continue;\n\n\t\t// FIXME: Improve types, \"never\" should not be used here\n\t\tconst result = await protector.execute(data as never, () => PROTECTOR_NEXT_SYMBOL);\n\n\t\tif (result === UNHANDLED_SYMBOL) continue;\n\t\tif (result !== PROTECTOR_NEXT_SYMBOL) return false;\n\t}\n\n\treturn true;\n}\n"]}