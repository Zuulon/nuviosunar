import { ClientEvents, Awaitable, ChatInputCommandInteraction, ContextMenuCommandInteraction, AutocompleteInteraction, ButtonInteraction, ModalSubmitInteraction, AnySelectMenuInteraction } from 'discord.js';
import './client-CVkzvYIb.js';
import { Commands, Components } from './utils/constants.js';
import { Builders } from './utils/enums.js';
import { NextFunction } from './types/utils.js';

interface ProtectorOptions {
    /** The signals that can be protected by this protector. */
    signals?: (keyof ClientEvents)[];
    /** The commands types that can be protected by this protector. */
    commands?: CommandKey[];
    /** The components types that can be protected by this protector. */
    components?: ComponentKey[];
}
/**
 * Protectors in Sunar act as middleware, allowing you to intercept and control the flow of commands and interactions within your Discord bot. They provide a flexible way to enforce permissions, validate inputs, or perform pre-processing before executing commands.
 *
 * @see https://sunar.js.org/docs/builders/protector
 * @see https://sunar.js.org/docs/guides/middlewares#protectors
 */
declare class Protector<TOptions extends ProtectorOptions = ProtectorOptions> implements Pick<Builder, 'type' | 'execute'> {
    readonly type = Builders.Protector;
    readonly options: TOptions;
    execute: (data: (TOptions['commands'] extends string[] ? ExecuteData[TOptions['commands'][number]] : never) | (TOptions['components'] extends string[] ? ExecuteData[TOptions['components'][number]] : never) | (TOptions['signals'] extends string[] ? ClientEvents[TOptions['signals'][number]] : never), next: NextFunction) => Awaitable<unknown>;
    constructor(options?: TOptions);
}
interface ExecuteData {
    [Commands.Slash]: ChatInputCommandInteraction;
    [Commands.ContextMenu]: ContextMenuCommandInteraction;
    [Commands.Autocomplete]: AutocompleteInteraction;
    [Components.Button]: ButtonInteraction;
    [Components.Modal]: ModalSubmitInteraction;
    [Components.SelectMenu]: AnySelectMenuInteraction;
}
type ProtectorExecuteData<TOptions extends ProtectorOptions = ProtectorOptions> = (TOptions['commands'] extends string[] ? ExecuteData[TOptions['commands'][number]] : never) | (TOptions['components'] extends string[] ? ExecuteData[TOptions['components'][number]] : never) | (TOptions['signals'] extends string[] ? ClientEvents[TOptions['signals'][number]] : never);

interface Builder {
    readonly type: Builders;
    protectors: Protector[];
    execute: (...args: any) => Awaitable<unknown>;
    config: object;
}
type CommandKey = (typeof Commands)[keyof typeof Commands];
type ComponentKey = (typeof Components)[keyof typeof Components];

export { type Builder as B, type CommandKey as C, type ExecuteData as E, type ProtectorOptions as P, Protector as a, type ProtectorExecuteData as b, type ComponentKey as c };
